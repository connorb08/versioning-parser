#!/usr/bin/env python3

# Connor Bray
# Lexer and parser to update versioning logic
# 6/22/2022

NEW_VERSIONING_CHECK = 'if TaxManager.isVersioning() then'
IMPORT_TAX_MANAGER = 'import fgl TaxManager'

import ply.lex as lex
import ply.yacc as yacc

class Lexer():

    # CONSTRUCTOR
    def __init__(self):
        self.lexer = lex.lex(module=self)
        # start in the (standard) initial state
        self.lexer.begin('INITIAL')

    # DESTRUCTOR
    def __del__(self):
        pass

    tokens = ['AND', 'THEN', 'OPEN', 'CLOSE', 'QUOTE', 'NOT_EQL', 'IF', 'ST_CLIENT_STATE', 'STATE', 'IMPORT', 'FGL']
    t_ignore = ' \t\r\n\f\v'

    def t_NEWLINE(self,t):
        r'\n+'
        t.lexer.lineno += len(t.value)

    def t_error(self,t):
        # print("Lexing error: Unknown character \"{}\" at line {}".format(t.value[0], t.lexer.lineno))
        t.lexer.skip(1)

    t_OPEN = '\('
    t_CLOSE = '\)'
    t_QUOTE = '\"'

    def t_IMPORT(self, t):
        r'import|IMPORT'
        return t
    
    def t_FGL(self, t):
        r'fgl|FGL'
        return t

    def t_AND(self, t):
        r'and'
        return t
    
    def t_THEN(self, t):
        r'then'
        return t
    
    def t_NOT_EQL(self, t):
        r'!='
        return t
    
    def t_IF(self, t):
        r'if'
        return t
    
    def t_ST_CLIENT_STATE(self, t):
        r'ST_CLIENT_STATE'
        return t
    
    def t_STATE(self, t):
        r'MA|MD|NY|CT|NH|MI|RI|LA|VT'
        return t
    
    def lex(self, input_string):
        self.lexer.input(input_string)
        while True:
            tok = self.lexer.token()
            if not tok:
                break
    

class Parser(object):
    
    tokens = Lexer.tokens

    # CONSTRUCTOR
    def __init__(self):
        self.lexer = Lexer()
        self.parser = yacc.yacc(module=self)
        self.versioning_checks = 0
        # fill with tuples (start_char, end_char)
        # replace versioning checks starting from last one
        self.versioning_locations = []
        self.import_locations = []
        self.error = 0

    # DESTRUCTOR
    def __del__(self):
        pass
    
    def p_starter(self, p):
        """
        starter : versioning_check 
                | import
        """

    def p_import(self, p):
        """
        import : IMPORT FGL
        """
        # print(f"Found an import at {(p.lexpos(1), p.lexpos(2) + 3)}")
        self.import_locations.append(p.lexpos(1))

    
    def p_versioning_check(self, p):
        """
        versioning_check : IF OPEN inner_check CLOSE THEN
        """
        print(f"Found a versioning check at {(p.lexpos(1), p.lexpos(5) + 4)}")
        self.versioning_locations.append((p.lexpos(1), p.lexpos(5) + 4))
        
    
    def p_not_state(self, p):
        """
        not_state : ST_CLIENT_STATE NOT_EQL QUOTE STATE QUOTE
        """
    
    def p_inner_check(self, p):
        """
        inner_check : not_state AND not_state AND not_state AND not_state AND not_state AND not_state AND not_state AND not_state AND not_state
        """
    
    def p_error(self, p):
        self.error = 1
        if p is None:
            print("Unexpectedly reached end of file (EOF)")
            return
            #raise TypeError("Unexpectedly reached end of file (EOF)")

        # Note the location of the error before trying to lookahead
        error_pos = p.lexpos

        # Reading the symbols from the Parser stack
        stack = [symbol for symbol in self.parser.symstack][1:]

    def parse(self, input_string):

        self.parser.parse(input_string)
        return self.versioning_locations, self.import_locations[0]


def parseLocations(file):
    write_string = ""

    with open(file) as f:
        file_contents = f.read()
    
    write_string = file_contents

    print(f'Parsing file {file}')
    parser = Parser()
    versioning_locations, import_location = parser.parse(file_contents)
    
    print(f'Found the following versioning checks: {versioning_locations}')

    return versioning_locations, import_location, file_contents

def replaceVersioningCheck(file, versioning_locations, import_location, write_string):
    for loc in reversed(versioning_locations):
        write_string = write_string[:loc[0]] + NEW_VERSIONING_CHECK + write_string[loc[1]:]
    
    # write_string = write_string[0:import_location] + f'{IMPORT_TAX_MANAGER}\n' + write_string[import_location:]
    
    print(f'Writing to file {file}')
    with open(file, 'w') as out:
        out.write(write_string)

def main():

    replace_files = ['/workspace/src/ar/arusrmnt/arusrmnt.4gl',
                    '/workspace/src/tx/txadchgs/txadchgs.4gl',
                    '/workspace/src/tx/txapspas/txapspas.4gl',
                    '/workspace/src/tx/txbilprt/txbilprt.4gl',
                    '/workspace/src/tx/txcalexm/txcalexm.4gl',
                    '/workspace/src/tx/txchgmnt/txchgmnt.4gl',
                    '/workspace/src/tx/txclascd/txclascd.4gl',
                    '/workspace/src/tx/txcrdmnt/txcrdmnt.4gl',
                    '/workspace/src/tx/txexmmnt/txexmmnt.4gl',
                    '/workspace/src/tx/txppimpt/txppimpt.4gl',
                    '/workspace/src/tx/txppmast/txppmast.4gl',
                    '/workspace/src/tx/txpprice/txpprice.4gl',
                    '/workspace/src/tx/txppvmnt/txppvmnt.4gl',
                    '/workspace/src/tx/txreimpt/txreimpt.4gl',
                    '/workspace/src/tx/txremast/txremast.4gl',
                    '/workspace/src/tx/txremove/txremove.4gl',
                    '/workspace/src/tx/txrpfind/txrpfind.4gl',
                    '/workspace/src/tx/txvalmnt/txvalmnt.4gl',
                    '/workspace/src/tx/txwippra/txwippra.4gl',
                    '/workspace/src/tx/txwirera/txwirera.4gl',
                    '/workspace/src/txbu/txchargebu/txchargebu.4gl',
                    '/workspace/src/txbu/txcrdcalbu/txcrdcalbu.4gl',
                    '/workspace/src/txbu/txexmcalbu/txexmcalbu.4gl',
                    '/workspace/src/txbu/txlistnobu/txlistnobu.4gl',
                    '/workspace/src/txbu/txproptybu/txproptybu.4gl']



    for f in replace_files:
        versioning_locations, import_location, file_contents = parseLocations(f)
        replaceVersioningCheck(f, versioning_locations, import_location, file_contents)

if __name__ == '__main__':
    main()